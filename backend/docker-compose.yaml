version: "3.9"
services:

  postgres-back:
    image: postgres
    environment:
      POSTGRES_PASSWORD: 123
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "postgres", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 5
    user: postgres

  license-manager:
    build:
      context: .
      dockerfile: ./Dockerfile
    depends_on:
      postgres-back:
        condition: service_healthy
    volumes:
      - ./lm_backend:/app/lm_backend
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:123@postgres-back:5432/postgres}
      ARMASEC_DOMAIN: ${ARMASEC_DOMAIN}
      ARMASEC_AUDIENCE: ${ARMASEC_AUDIENCE}
      ARMASEC_DEBUG: ${ARMASEC_DEBUG}
      LOG_LEVEL: ${LOG_LEVEL}
    ports:
      - "7000:8000"
    command: uvicorn lm_backend.main:app --reload --workers 1 --host 0.0.0.0 --port 8000

  unittest:
    build:
      context: .
      dockerfile: ./Dockerfile-ci
    environment:
      TEST_DATABASE_HOST: test-db
      TEST_DATABASE_USER: test-db-user
      TEST_DATABASE_PSWD: test-db-pswd
      TEST_DATABASE_NAME: test-db-name
      TEST_DATABASE_PORT: 5432
      ARMASEC_DOMAIN: armasec.dev
      ARMASEC_AUDIENCE: https://armasec.dev
      LOG_LEVEL: DEBUG
      DEPLOY_ENV: TEST
    command: poetry run pytest -s
    depends_on:
      test-db:
        condition: service_healthy
    volumes:
      - ./tests:/app/tests

  migration:
    build:
      context: .
      dockerfile: ./Dockerfile-ci
    environment:
      DATABASE_URL: postgresql://omnivector:rats@pgsql:5432/ratsdb
      ARMASEC_DOMAIN: armasec.dev
      ARMASEC_AUDIENCE: https://armasec.dev
      LOG_LEVEL: DEBUG
    command: "poetry run python -m alembic -c alembic/alembic.ini upgrade head"
    depends_on:
      pgsql:
        condition: service_healthy

  pgsql:
    image: postgres:13-alpine
    environment:
      POSTGRES_USER: omnivector
      POSTGRES_PASSWORD: rats
      POSTGRES_DB: ratsdb
    ports: ["5432:5432"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  test-db:
    image: postgres:13-alpine
    environment:
      - POSTGRES_USER=test-db-user
      - POSTGRES_PASSWORD=test-db-pswd
      - POSTGRES_MULTIPLE_DATABASES="test-db-name","alt-test-db"
    volumes:
      - ./docker-postgres-multiple-databases:/docker-entrypoint-initdb.d
    ports: ["5433:5432"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
