[tool.poetry]
name = "license-manager"
version = "0.9.2-dev0"
description = "`license-manager` is a license scheduling middleware that adds value in situations where multiple clusters share a license server or set of license servers."
authors = ["OmniVector Solutions <info@omnivector.solutions>"]
license = "MIT"

packages = [
    { include = "licensemanager2", from = "src" }
]

[tool.poetry.dependencies]
python = ">=3.8,<4.0"
alembic = { version = "1.6.3", optional = true }
asyncpg = ""
aws-psycopg2 = ""
boto3 = { version = "", optional = true }
click = { version = "", optional = true }
databases = "0.4.1"
fastapi = ""
fastapi-utils = ""
httpx = { version = "0.17.1", optional = true }
jinja2 = { version = "", optional = true }
mangum = ""
pyjwt = { version = "", optional = true }
sqlalchemy = "1.3.23"
# sqlalchemy = "~1.4"  # waiting for https://github.com/encode/databases/issues/298
pyyaml = { version = "5.4.1", optional = true }
pydantic = {version = "1.8.1", extras = ["dotenv"] }

# soft-required by databases:
aiosqlite = { version = "", optional = true }

flake8 = { version = "", optional = true }
isort = { version = "", optional = true }
mypy = { version = "", optional = true }
pytest = { version = "", optional = true }
pytest-asyncio = { version = "", optional = true }
pytest-cov = { version = "", optional = true }
pytest-env = { version = "", optional = true }
pytest-freezegun = { version = "", optional = true }
respx = { version = "0.16.3", optional = true }
sqlalchemy-stubs = { version = "", optional = true }
tox = { version = "", optional = true }
uvicorn = { version = "", optional = true }

[tool.poetry.extras]
agent = ["httpx", "jinja2", "uvicorn", "pyyaml", "pydantic"]

lm-create-jwt = ["boto3", "click", "pyjwt"]

dev = [
    "aiosqlite",
    "black",
    "flake8",
    "isort",
    "mypy",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-env",
    "pytest-freezegun",
    "pyyaml",
    "respx",
    "sqlalchemy-stubs",
    "tox",
    "uvicorn",
    "pydantic",
    "alembic",
    ]

flexlmsim = ["jinja2", "tqdm"]


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
lm-create-jwt = "licensemanager2.backend.createjwt:main"
slurmctld-prolog = "licensemanager2.workload_managers.slurm.slurmctld_prolog:main"
slurmctld-epilog = "licensemanager2.workload_managers.slurm.slurmctld_epilog:main"
